---
# Generate keys and certificate requests
- name: Create directories (if not already present)
  file:
    path={{ item }}
    state=directory
  with_items:
    - "{{ KEYSTORE_DIR }}"
    - "{{ CA_DIR}}"
    - "{{ CERT_DIR }}"

- name: Create server keystores. (if not already present)
  command: /usr/bin/keytool -genkeypair -keystore {{ KEYSTORE_DIR }}/{{ item }}.jks -keyalg RSA -alias {{ item }} -dname "CN={{ item }}, C={{ C }}, ST={{ ST }}, L={{ L }}, O={{ O }}, OU={{ OU }}"{% if hostvars[item]['san'] is defined %} -ext "san={{ hostvars[item]['san'] }}"{% endif %} -storepass "{{ SSL_STORE_PASSWORD }}" -keypass "{{ SSL_KEY_PASSWORD }}" -validity 1000
  args:
    creates: "{{ CERT_DIR }}/{{ item }}.jks"
  with_items:
    - "{{ groups.servers }}"

- name: Export CSRs for hosts (if not already present)
  command: /usr/bin/keytool -certreq -keystore {{ KEYSTORE_DIR }}/{{ item }}.jks -alias {{ item }}{% if hostvars[item]['san'] is defined %} -ext "san={{ hostvars[item]['san'] }}"{% endif %} -storepass {{ SSL_STORE_PASSWORD }} -keypass {{ SSL_KEY_PASSWORD }} -file {{ CERT_DIR }}/{{ item }}.csr
  args:
    creates: "{{ CERT_DIR }}/{{ item }}.csr"
  with_items:
    - "{{ groups.servers }}"

- name: Create client keystores (if not already present)
  command: /usr/bin/keytool -genkeypair -keystore {{ KEYSTORE_DIR }}/{{ item }}.jks -keyalg RSA -alias {{ item }} -dname "CN={{ item }}, C={{ C }}, ST={{ ST }}, L={{ L }}, O={{ O }}, OU={{ OU }}" -storepass "{{ SSL_STORE_PASSWORD }}" -keypass "{{ SSL_KEY_PASSWORD }}" -validity 1000
  args:
    creates: "{{ CERT_DIR }}/{{ item }}.jks"
  with_items:
    - "{{ CLIENT_CERTIFICATES }}"

- name: Export CSRs for clients (if not already present)
  command: /usr/bin/keytool -certreq -keystore {{ KEYSTORE_DIR }}/{{ item }}.jks -alias {{ item }} -storepass {{ SSL_STORE_PASSWORD }} -keypass {{ SSL_KEY_PASSWORD }} -file {{ CERT_DIR }}/{{ item }}.csr
  args:
    creates: "{{ CERT_DIR }}/{{ item }}.csr"
  with_items:
    - "{{ CLIENT_CERTIFICATES }}"

# Create CA files and sign all certificate requests

- name: Create private key to sign CSRs with (if not already created)
  command: openssl req -new -x509 -nodes -newkey rsa:2048 -keyout rootCA.key -out rootCA.pem -subj "/C={{ C }}/ST={{ ST }}/L={{ L }}/O={{ O }}/OU={{ OU }}/CN={{ DOMAIN }}" -days 1000
  args:
    chdir: "{{ CA_DIR }}"
    creates: "{{ CA_DIR }}/rootCA.key"

- name: Create shared truststore (if not already created)
  command: /usr/bin/keytool -importcert -keystore truststore.jks -alias CARoot -storepass "{{ SSL_STORE_PASSWORD }}" -keypass "{{ SSL_KEY_PASSWORD }}" -file {{ CA_DIR }}/rootCA.pem -noprompt
  args:
    chdir: "{{ KEYSTORE_DIR }}"
    creates: "{{ KEYSTORE_DIR }}/truststore.jks"

- name: Sign CSRs
  command: openssl x509 -req -CA {{ CA_DIR }}/rootCA.pem -CAkey {{ CA_DIR }}/rootCA.key -in {{ item }}.csr -out {{ item }}.crt -days 1000 -CAcreateserial -passin pass:{{ SSL_KEY_PASSWORD }}
  args:
    chdir: "{{ CERT_DIR }}"
    creates: "{{ item }}.crt"
  with_items:
    - "{{ groups.servers }}"
    - "{{ CLIENT_CERTIFICATES }}"

# Import CA & signed certs into keystores
- name: Import root CA certificate into keystore
  command: /usr/bin/keytool -importcert -keystore {{ item }}.jks -alias CARoot -storepass "{{ SSL_STORE_PASSWORD }}" -keypass "{{ SSL_KEY_PASSWORD }}" -file {{ CA_DIR }}/rootCA.pem -noprompt
  args:
    chdir: "{{ KEYSTORE_DIR }}"
  ignore_errors: yes
  with_items:
    - "{{ groups.servers }}"
    - "{{ CLIENT_CERTIFICATES }}"

- name: Import signed certificate into keystore
  command: /usr/bin/keytool -importcert -keystore {{ item }}.jks -alias {{ item }} -storepass "{{ SSL_STORE_PASSWORD }}" -keypass "{{ SSL_KEY_PASSWORD }}" -file {{ CERT_DIR }}/{{ item }}.crt -noprompt
  args:
    chdir: "{{ KEYSTORE_DIR }}"
  ignore_errors: yes
  with_items:
    - "{{ groups.servers }}"
    - "{{ CLIENT_CERTIFICATES }}"