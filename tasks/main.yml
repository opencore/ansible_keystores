---
# Purpose: Creates the TLS/SSL certificates needed
#
# Notes:
#   - Executed on every master and worker server
#   - This is part I of a three step process:
#     Phase 1) Generate all certs, keystores, and CSRs for every server and process
#     Phase 2) Sign all CSRs with the central CA root certificate
#     Phase 3) Import all signed CSRs and put shared truststore in place

- name: Create keystore staging directory in root account (if not already present)
  file:
    path={{ KEYSTORE_BASE_DIR }}
    state=directory

- name: Create keystore (if not already present)
  command: /usr/bin/keytool -genkeypair -keystore {{ KEYSTORE_BASE_DIR }}/{{ item }}.jks -keyalg RSA -alias {{ item }} -dname "CN={{ item }}" -storepass "{{ SSL_STORE_PASSWORD }}" -keypass "{{ SSL_KEY_PASSWORD }}" -validity 1000
  args:
    creates: "{{ KEYSTORE_BASE_DIR }}/{{ item }}.jks"
  with_items:
    - "{{ groups.servers }}"
    - "{{ CLIENT_CERTIFICATES }}"

- name: Export CSR (if not already present)
  command: /usr/bin/keytool -certreq -keystore {{ KEYSTORE_BASE_DIR }}/{{ item }}.jks -alias {{ item }} -storepass {{ SSL_STORE_PASSWORD }} -keypass {{ SSL_KEY_PASSWORD }} -file {{ KEYSTORE_BASE_DIR }}/{{ item }}.csr
  args:
    creates: "{{ KEYSTORE_BASE_DIR }}/{{ item }}.csr"
  with_items:
    - "{{ groups.servers }}"
    - "{{ CLIENT_CERTIFICATES }}"

# Purpose: Signs the TLS/SSL certificates of each server
#
# Notes:
#   - Executed on KDC server
#   - This is part II of a three step process:
#     Phase 1) Generate all certs, keystores, and CSRs for every server and process
#     Phase 2) Sign all CSRs with the central CA root certificate
#     Phase 3) Import all signed CSRs and put shared truststore in place

- name: Create private key to sign CSRs with (if not already created)
  command: openssl req -new -x509 -nodes -newkey rsa:2048 -keyout rootCA.key -out rootCA.pem -subj "/C={{ C }}/ST={{ ST }}/L={{ L }}/O={{ O }}/OU={{ OU }}/CN={{ DOMAIN }}" -days 1000
  args:
    chdir: "{{ KEYSTORE_BASE_DIR }}"
    creates: "{{ KEYSTORE_BASE_DIR }}/rootCA.key"

- name: Create shared truststore (if not already created)
  command: /usr/bin/keytool -importcert -keystore truststore.jks -alias CARoot -storepass "{{ SSL_STORE_PASSWORD }}" -keypass "{{ SSL_KEY_PASSWORD }}" -file rootCA.pem -noprompt
  args:
    chdir: "{{ KEYSTORE_BASE_DIR }}"
    creates: "{{ KEYSTORE_BASE_DIR }}/truststore.jks"

- name: Set access rights for truststore
  file:
    path={{ KEYSTORE_BASE_DIR }}/truststore.jks
    state=file
    mode=600

- name: Sign CSRs
  command: openssl x509 -req -CA rootCA.pem -CAkey rootCA.key -in {{ item }}.csr -out {{ item }}.crt -days 1000 -CAcreateserial -passin pass:{{ SSL_KEY_PASSWORD }}
  args:
    chdir: "{{ KEYSTORE_BASE_DIR }}"
    creates: "{{ item }}.crt"
  with_items:
    - "{{ groups.servers }}"
    - "{{ CLIENT_CERTIFICATES }}"

# Purpose: Signs the TLS/SSL certificates of each server
#
# Notes:
#   - Executed on all master and worker server
#   - This is part III of a three step process:
#     Phase 1) Generate all certs, keystores, and CSRs for every server and process
#     Phase 2) Sign all CSRs with the central CA root certificate
#     Phase 3) Import all signed CSRs and put shared truststore in place

- name: Create final keystore directory in system location (if not already present)
  file:
    path={{ KEYSTORE_DIR }}
    state=directory
    mode=755

- name: Copy shared truststore into final location
  copy:
    src="{{ KEYSTORE_BASE_DIR }}/truststore.jks"
    dest={{ KEYSTORE_DIR }}
    remote_src=yes

- name: Import root CA certificate into keystore
  command: /usr/bin/keytool -importcert -keystore {{ item }}.jks -alias CARoot -storepass "{{ SSL_STORE_PASSWORD }}" -keypass "{{ SSL_KEY_PASSWORD }}" -file rootCA.pem -noprompt
  args:
    chdir: "{{ KEYSTORE_BASE_DIR }}"
  ignore_errors: yes
  with_items:
    - "{{ groups.servers }}"
    - "{{ CLIENT_CERTIFICATES }}"

- name: Import signed certificate into keystore
  command: /usr/bin/keytool -importcert -keystore {{ item }}.jks -alias {{ item }} -storepass "{{ SSL_STORE_PASSWORD }}" -keypass "{{ SSL_KEY_PASSWORD }}" -file {{ item }}.crt -noprompt
  args:
    chdir: "{{ KEYSTORE_BASE_DIR }}"
  ignore_errors: yes
  with_items:
    - "{{ groups.servers }}"
    - "{{ CLIENT_CERTIFICATES }}"

# Note: We could either add the real name into the ssl-server.xml/ss-client.xml or use the below approach
- name: Copy local keystore into final location
  copy:
    src={{ KEYSTORE_BASE_DIR }}/{{ item }}.jks
    dest={{ KEYSTORE_DIR }}
    remote_src=yes
  with_items:
    - "{{ groups.servers }}"
    - "{{ CLIENT_CERTIFICATES }}"
